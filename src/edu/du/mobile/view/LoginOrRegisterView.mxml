<?xml version="1.0"?>
<!--
  Created by jun on 9/14/14.
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns:mx="library://ns.adobe.com/flex/mx"
    xmlns:popups="edu.du.mobile.view.popups.*"
    currentState="register">

    <fx:Script>
        <![CDATA[
        import edu.du.mobile.control.events.NavigationEvent;
        import edu.du.mobile.model.constants.ApplicationScreens;
        import edu.du.mobile.model.AppModel;
        import edu.du.mobile.model.vo.User;

        import mx.managers.PopUpManager;

        [Bindable]
        private var _appModel:AppModel = AppModel.getInstance();
        public static const VIEW_STATE_LOGIN:String = "login";
        public static const VIEW_STATE_REGISTER:String = "register";

        private const _defaultMessagingPopupTitle:String = "Success";
        private const _defaultMessagingPopupMessage:String = "successful";

        [Bindable]
        public var messagingPopupTitle:String = _defaultMessagingPopupTitle;
        [Bindable]
        public var messagingPopupMessage:String = _defaultMessagingPopupMessage;

        private var _formValidatedSuccessfully:Boolean;


        private function _validateLoginData():Boolean {
            var username:String = username_ti.text;
            var password:String = password_ti.text;

            if (username == "" || password == "") {
                messagingPopupTitle = "Login Error";
                messagingPopupMessage = "Please fill out username/email and password.";
                _formValidatedSuccessfully = false;
            }
            // TO-DONE: Change this else if to loop through the AppModel's userCollection to compare the username and password against users in the collection.
            var isUserMatch = false;
            for (var i:Object in _appModel.userCollection) {
                if (isUserMatch == false) {
                // if the flag has been set we don't want to keep going. There is probably a more graceful way to do this.
                    if (_appModel.userCollection[i].username == username && _appModel.userCollection[i].password == password) {
                        isUserMatch = true;
                        _appModel.loggedInUser = _appModel.userCollection[i];
                        // Force login
                    }
                }
            }

        if (isUserMatch == false) {
            messagingPopupTitle = "Login Error";
            messagingPopupMessage = "Invalid user/password combination.";
            _formValidatedSuccessfully = false;
        }
        else {
            messagingPopupTitle = "Login " + _defaultMessagingPopupTitle;
            messagingPopupMessage = "Login " + _defaultMessagingPopupMessage;
            _formValidatedSuccessfully = true;
        }
        return _formValidatedSuccessfully;
        }

        var errorsToDisplay:Array = new Array();
        private function _validateRegistrationData():Boolean {
            //reset if multiple attempts
            errorsToDisplay = [];
            // Recycled error handling from previous assignments.
            // Regex borrowed from:
            // http://stackoverflow.com/questions/10568660/actionscript3-regex-expression-for-password-that-
            // checks-number-of-characters
            // Match intent: 6-15 characters, one lower, one upper, one number
            var validPassword = new RegExp("^.*(?=.{6,15})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).*$");
            // Prepare user input for evaluation
            var evaluateUsername:String = reg_username_ti.text;
            var evaluatePassword:String = password_ti.text;
            var evaluatePasswordConfirm:String = confirm_password_ti.text;
            var evaluateGender:RadioButtonGroup = genderRBGroup as RadioButtonGroup;
            var evaluateSelectedGender:RadioButton = evaluateGender.selection;

            // Perform basic validation (bool expected from regex matches and string comparison)
            var isValidPassword:Boolean = evaluatePassword.match(validPassword);
            var isMatchingPassword:Boolean = (evaluatePassword == evaluatePasswordConfirm);
            var isValidTerms:Boolean = agreeToTerms_chk.selected;

            // Setup a container for any errors encountered.


            // Prepare error messages
            var validateUsername:Object = {stringTest: evaluateUsername, expected: "not empty", error: "* Whoops! You need to enter a username."}
            var validatePassword:Object = {stringTest: isValidPassword, expected: true, error: "* Your password does not meet the requirements."};
            var validatePasswordMatch:Object = {stringTest: isMatchingPassword, expected: true, error: "* The passwords you entered do not match."}
            var validateGender:Object = {stringTest: evaluateSelectedGender, expected: "not empty", error: "* You need to select a gender."};
            var validateTerms:Object = {stringTest:isValidTerms, expected:true, error:"* You need to agree to the terms."};

            var evaluateTextValues:Array = [validateUsername, validatePassword, validatePasswordMatch, validateGender, validateTerms];

            for (var i:String in evaluateTextValues) {
                // Reset previous styles if the user is trying again
                if (evaluateTextValues[i].expected == true) {
                    if (evaluateTextValues[i].stringTest !== evaluateTextValues[i].expected) {
                        errorsToDisplay.push("\n"); // Make it a bit more readable
                        errorsToDisplay.push(evaluateTextValues[i].error);
                    }
                }

                else {
                    if (evaluateTextValues[i].stringTest == null || evaluateTextValues[i].stringTest == '') {
                        // If the select group has no children selected, it will return null. This checks
                        // for both null and empty strings (username).
                        errorsToDisplay.push("\n");
                        errorsToDisplay.push(evaluateTextValues[i].error);
                    }
                }
            }
            isEmailValid.validate();

            // Can't have two users with the same username...
            var userNameIsAvailable = true;
            for (var o:Object in _appModel.userCollection) {
                if (userNameIsAvailable == true) {
                    if (_appModel.userCollection[o].username == evaluateUsername) {
                        userNameIsAvailable = false;
                        errorsToDisplay.push("\n");
                        errorsToDisplay.push('* The username you want is not available.');
                    }
                }
            }
            if (errorsToDisplay.length == 0) {
                // Original (provided) success handling
                messagingPopupTitle = "Account Creation " + _defaultMessagingPopupTitle;
                messagingPopupMessage = "Account creation " + _defaultMessagingPopupMessage;
                // Add the user
                var newUser:User = new User();
                newUser.email = reg_email_ti.text;
                newUser.username = evaluateUsername;
                newUser.password = evaluatePassword;
                newUser.gender = evaluateSelectedGender.group.selectedValue.toString();
                _appModel.addUserToCollection(newUser);
                _appModel.loggedInUser = newUser;
                _formValidatedSuccessfully = true;
            }
            else {
                // Original (provided) error handling
                messagingPopupTitle = "Registration Error";
                messagingPopupMessage = "Please fill out all required (*) fields.";
                for (var i:String in errorsToDisplay) {
                    messagingPopupMessage += errorsToDisplay[i];
                }
                _formValidatedSuccessfully = false;

            }
            return _formValidatedSuccessfully;
        }

        private function _onSubmitClick(event:Event):void {

            if (this.currentState == VIEW_STATE_LOGIN) {
                _validateLoginData();
            }
            else {
                _validateRegistrationData();
            }

            messagingPopup.open(this, true);
            PopUpManager.centerPopUp(messagingPopup);
        }

        private function _onMessagingPopupClose(event:Event):void {
            if (_formValidatedSuccessfully) {
                dispatchEvent(new NavigationEvent(NavigationEvent.GOTO_SCREEN, ApplicationScreens.LOCATION_FEED_LIST));
            }
        }

        private function _onLoginOrRegisterToggleClick(event:Event):void {
            currentState == VIEW_STATE_LOGIN ? currentState = VIEW_STATE_REGISTER : currentState = VIEW_STATE_LOGIN;
        }


        override public function set data(data:Object):void {
            if (data is String && ( data == ApplicationScreens.LOGIN || data == ApplicationScreens.REGISTER )) {
                this.currentState = data.toString();
            }
        }
        ]]>
    </fx:Script>


    <fx:Declarations>
        <s:RadioButtonGroup id="genderRBGroup"/>

        <popups:HelloWorldAppPopup id="messagingPopup"
            title="{ messagingPopupTitle }"
            message="{ messagingPopupMessage }"
            close="_onMessagingPopupClose( event )"/>

        <!-- TO-DONE: Add an EmailValidator and use it to validate the email field when the user registers: https://flex.apache.org/asdoc/mx/validators/EmailValidator.html -->
        <mx:EmailValidator id="isEmailValid" source="{reg_email_ti}" property="text" invalid="errorsToDisplay.push('\n* The e-mail address you entered is not valid.')"/>
    </fx:Declarations>


    <s:states>
        <s:State name="login"/>
        <s:State name="register"/>
    </s:states>


    <s:layout>
        <s:VerticalLayout paddingTop="20" paddingBottom="20"
            paddingLeft="20" paddingRight="20"/>
    </s:layout>

    <s:Scroller height="100%" width="100%"
        top="20" left="20" right="20">

        <s:VGroup id="accountForm">
            <!-- for abi testing -->
            <!--<s:Label text="Manage" click="navigator.pushView(ManageView)" />-->
            <s:Label id="accountFormHeader"
                     text.login="Login"
                     text.register="Create an Account"
                     fontSize="42"
                     paddingLeft="100"
                     paddingBottom="20"/>

            <s:Label text="Username or email"
                includeIn="login"/>
            <s:TextInput id="username_ti"
                prompt="please enter your username or email"
                includeIn="login"/>

            <s:Label text="Username *" includeIn="register"/>
            <s:TextInput id="reg_username_ti" includeIn="register"
                         prompt="choose a username"/>

            <s:Label text="Email *" includeIn="register"/>
            <s:TextInput id="reg_email_ti" includeIn="register"
                         prompt="please enter your email"/>


            <s:Label text="Password *"/>
            <s:TextInput id="password_ti"
                         prompt="enter a password"
                         displayAsPassword="true"/>

            <s:Label text="Confirm password *"
                     includeIn="register"/>
            <s:TextInput id="confirm_password_ti"
                         prompt="confirm the password"
                         displayAsPassword="true"
                         includeIn="register"/>

            <s:Label text="gender"
                     includeIn="register"/>
            <s:HGroup id="genderSelect"
                      includeIn="register">

                <s:RadioButton id="male_rb"
                               group="{ genderRBGroup }"/>
                <s:Label text="male"/>

                <s:RadioButton id="female_rb"
                               group="{ genderRBGroup }"/>
                <s:Label text="female"/>

            </s:HGroup>

            <s:HGroup id="termsAndCond"
                      includeIn="register">
                <s:CheckBox id="agreeToTerms_chk"/>
                <s:Label text="agree to terms *"/>
            </s:HGroup>

            <s:Button id="submit_btn"
                      label="submit"
                      click="_onSubmitClick( event )"/>

            <s:Label id="loginOrRegisterToggle"
                text.login="Create Account"
                text.register="Log In"
                buttonMode="true" mouseChildren="false"
                click="_onLoginOrRegisterToggleClick( event )"/>

        </s:VGroup>

    </s:Scroller>

</s:View>
